import fs from 'node:fs'
import path from 'node:path'

const WIRE_ILLUSTRATIONS_DIR =
  'packages/illustrations/src/components/WireIllustration/__generated__/'

const DYNAMIC_ILLUSTRATIONS_DIR =
  'packages/illustrations/src/components/DynamicIllustration/__generated__'

const WARNING = `/**
      * This file is automatically generated from /utils/scripts/illustrations/update-components.tsx
      * PLEASE DO NOT EDIT HERE
      */`

export const updateWireIllustrations = (
  illustrations: { dir: string; category: string }[],
  baseUrl: string,
) => {
  // Delete everything inside the WIRE_ILLUSTRATIONS_DIR folder to clean
  fs.readdirSync(WIRE_ILLUSTRATIONS_DIR).forEach(file => {
    const fullPath = path.join(WIRE_ILLUSTRATIONS_DIR, file)
    if (fs.statSync(fullPath).isDirectory()) {
      fs.rmdirSync(fullPath, { recursive: true })
    } else {
      fs.unlinkSync(fullPath)
    }
  })

  // Create illustration.tsx file
  const indexPath = path.join(WIRE_ILLUSTRATIONS_DIR, 'Illustrations.tsx')
  fs.writeFileSync(
    indexPath,
    `
    'use client'

    ${WARNING}
    
     export const ILLUSTRATIONS = {
    ${illustrations
      .map(element => {
        const { dir: directory, category: categorySnake } = element

        const categoryNotCapitalized = categorySnake.replace(/-./g, x =>
          x[1].toUpperCase(),
        )

        return `${categoryNotCapitalized}: "${baseUrl}/products/${directory}/${categorySnake}-wire.svg",`
      })
      .join('\n')}}
    
    `,
  )
}

const filterDynamicIllustrations = (
  dynamicIllustrations: { dir: string; category: string }[],
) => {
  // Remove -dark and -light from the names
  const bases = dynamicIllustrations.map(illustration =>
    illustration.category.replace(/-(dark|light)$/, ''),
  )

  // Keep the ones with dark & light version available
  const finalIllustrations = [...new Set(bases)].filter(
    base =>
      dynamicIllustrations.some(i => i.category === `${base}-dark`) &&
      dynamicIllustrations.some(i => i.category === `${base}-light`),
  )

  return finalIllustrations.map(base => {
    // We take the first dir found for this base)
    const dir =
      dynamicIllustrations.find(i => i.category.startsWith(base))?.dir ?? ''

    return { category: base, dir }
  })
}

export const updateDynamicIllustrations = (
  dynamicIllustrations: { dir: string; category: string }[],
  baseUrl: string,
) => {
  const indexPath = path.join(DYNAMIC_ILLUSTRATIONS_DIR, 'Illustrations.tsx')

  const filteredDynamicIllustrations =
    filterDynamicIllustrations(dynamicIllustrations)

  fs.writeFileSync(
    indexPath,
    `
    'use client' 
    
    ${WARNING}

    const BASE_URL = '${baseUrl}'

    ${filteredDynamicIllustrations
      .map(
        illustration => `
      const ${illustration.category}Light = \`\${BASE_URL}/various/${illustration.dir}/${illustration.category}-light.webp\`
      const ${illustration.category}Dark = \`\${BASE_URL}/various/${illustration.dir}/${illustration.category}-dark.webp\``,
      )
      .join('\n')}

    export type IllustrationsKeys = {
    ${filteredDynamicIllustrations
      .map(illustration => `${illustration.category}: string`)
      .join('\n')}
    }

    export const ILLUSTRATIONS = {
      light: {
       ${filteredDynamicIllustrations
         .map(
           illustration =>
             `${illustration.category}: ${illustration.category}Light,`,
         )
         .join('\n')}
      } satisfies IllustrationsKeys,

      dark: {
      ${filteredDynamicIllustrations
        .map(
          illustration =>
            `${illustration.category}: ${illustration.category}Dark,`,
        )
        .join('\n')}
      } satisfies IllustrationsKeys,
      }
`,
  )
}
