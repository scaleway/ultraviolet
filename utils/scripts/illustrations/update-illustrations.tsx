import fs from 'node:fs'
import path from 'node:path'
import {
  updateDynamicIllustrations,
  updateWireIllustrations,
} from './update-components'

const ILLUSTRATIONS_DIR = 'packages/illustrations/src/assets'
const BASE_URL = `https://assets.scaleway.com/illustrations`
const ILLUSTRATIONS_CATEGORIES: { dir: string; category: string }[] = []
const DYNAMIC_ILLUSTRATIONS: { dir: string; category: string }[] = []
const WARNING = `/**
      * This file is automatically generated from /utils/scripts/illustrations/update-illustrations.tsx
      * PLEASE DO NOT EDIT HERE
      */`

// Updates ILLUSTRATIONS_CATEGORIES & DYNAMIC_ILLUSTRATIONS
const updateListIllustrationsCategories = (directory: string) => {
  const dirName = path.basename(directory)

  if (dirName.endsWith('-wire.svg')) {
    const parentDir = path.dirname(directory)
    const parentDirName = path.basename(parentDir)
    ILLUSTRATIONS_CATEGORIES.push({
      dir: parentDirName,
      category: dirName.replace('-wire.svg', ''),
    })
  }

  if (dirName.endsWith('-dark.webp') || dirName.endsWith('-light.webp')) {
    const parentDir = path.dirname(directory)
    const parentDirName = path.basename(parentDir)
    DYNAMIC_ILLUSTRATIONS.push({
      dir: parentDirName,
      category: dirName.replace('.webp', ''),
    })
  }
}

// Add .webp and .svg files to index.ts
const importIllustration = (
  directory: string,
  file: string,
  output: string,
  illustrations: string[],
) => {
  const parsedFile = path.parse(file)

  if (parsedFile.ext === '.webp' || parsedFile.ext === '.svg') {
    const filename = parsedFile.name.replace(/-./g, x => x[1].toUpperCase())
    const relativePath = directory.split('illustrations/src/assets/')[1]

    updateListIllustrationsCategories(directory)

    illustrations.push(filename)
    fs.appendFileSync(
      output,
      `const ${filename} = \`\${BASE_URL}/${relativePath.replace(/\\/g, '/')}\`\n`,
    )
  }
}

// Find folders and files of illustrations
const findFiles = (dir: string, output: string, illustrations: string[]) => {
  const files = fs.readdirSync(dir)
  fs.writeFileSync(
    output,
    `${WARNING}\n
      const BASE_URL = '${BASE_URL}'\n\n`,
  )
  files.forEach(file => {
    const fullPath = path.join(dir, file)
    const isDirectory = fs.statSync(fullPath).isDirectory()
    if (isDirectory) {
      findFiles(fullPath, output, illustrations)
    } else {
      importIllustration(fullPath, file, output, illustrations)
    }
  })
}

const exportIllustrations = (output: string, illustrations: string[]) => {
  fs.appendFileSync(output, `\nexport { ${illustrations.toString()} }`)
}

// Create index.ts for every illustration folder
// !! only works if depth < 2 (assets/sub1/sub2/index.ts will be created but not assets/sub1/sub2/sub3/index.ts) !!
const updateIndexes = () => {
  const subDirs = fs.readdirSync(ILLUSTRATIONS_DIR)

  // Go through first subdirectories (product, various)
  subDirs.forEach(subDir => {
    const subDirPath = path.join(ILLUSTRATIONS_DIR, subDir)

    if (
      fs.statSync(subDirPath).isDirectory() &&
      !['__stories__', 'components'].includes(subDir)
    ) {
      const files = fs.readdirSync(subDirPath)

      // Create index for each directory inside the subdirectories
      files.forEach(element => {
        const fullPath = path.join(subDirPath, element)
        if (fs.statSync(fullPath).isDirectory()) {
          const illustrations: string[] = []
          findFiles(fullPath, `${fullPath}/index.ts`, illustrations)
          exportIllustrations(`${fullPath}/index.ts`, illustrations)
        }
      })
    }
  })
}

// Export all products in products/index.ts
const exportProducts = () => {
  const PRODUCTS_DIR = `${ILLUSTRATIONS_DIR}/products`
  const productsDirs = fs.readdirSync(PRODUCTS_DIR)
  const productExports: string[] = []
  fs.writeFileSync(`${PRODUCTS_DIR}/index.ts`, `${WARNING}\n`)
  productsDirs.forEach(productDir => {
    const fullPath = path.join(PRODUCTS_DIR, productDir)
    if (fs.statSync(fullPath).isDirectory()) {
      fs.appendFileSync(
        `${PRODUCTS_DIR}/index.ts`,
        `\nimport * as ${productDir} from './${productDir}'`,
      )
      productExports.push(productDir)
    }
  })

  fs.appendFileSync(
    `${PRODUCTS_DIR}/index.ts`,
    `\n\nexport { ${productExports.toString()}}`,
  )
}

updateIndexes()
exportProducts()
updateWireIllustrations(ILLUSTRATIONS_CATEGORIES, BASE_URL)
updateDynamicIllustrations(DYNAMIC_ILLUSTRATIONS, BASE_URL)
